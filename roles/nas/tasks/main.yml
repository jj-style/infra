- name: install applications
  tags: install
  package:
    name: "{{ item }}"
    state: latest
    update_cache: true
  loop: "{{ server_pkgs }}"

- block:
  - include_tasks: install-docker.yml
    when:
      - ansible_distribution in ["Debian", "Pop!_OS", "Ubuntu"]
  
- name: start/enable services
  tags: systemd
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop: "{{ systemd_services }}"

- name: mask sleep/suspend services
  tags: systemd
  ansible.builtin.systemd:
    name: "{{ item }}"
    masked: yes
  loop:
    - sleep.target
    - suspend.target
    - hibernate.target
    - hybrid-sleep.target


- name: mount data disks
  mount:
    fstype: "{{ item.fstype }}"
    opts: "{{ item.opts }}"
    path: "{{ item.path }}"
    src: "{{ item.src}}"
    backup: true
    state: mounted
  loop: "{{ data_disks | flatten(levels=1) }}"

- name: mount mergerfs
  mount:
    fstype: "{{ item.fstype }}"
    opts: "{{ item.opts }}"
    path: "{{ item.path }}"
    src: "{{ item.src}}"
    backup: true
    state: mounted
  loop: "{{ mergerfs_disks | flatten(levels=1) }}"

- name: mount snapraid parity drives
  mount:
    fstype: "{{ item.fstype }}"
    opts: "{{ item.opts }}"
    path: "{{ item.path }}"
    src: "{{ item.src}}"
    backup: true
    state: mounted
  loop: "{{ snapraid_disks | flatten(levels=1) }}"

- block:
  - include_tasks:
      file: snapraid.yml
      apply:
        tags: snapraid
    tags: always
  - include_tasks: services.yml
  - include_tasks: ufw_firewall.yml
    tags: firewall,ufw

- name: Enable IPv4 forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes

- name: Configure Tailscale
  include_role:
    name: artis3n.tailscale
    apply:
      tags: vpn,tailscale
  tags: always

- name: Run ProtonVPN Docker Container
  tags: vpn,protonvpn
  docker_container:
    name: protonvpn
    image: ghcr.io/tprasadtp/protonvpn:latest
    devices:
      - /dev/net/tun:/dev/net/tun
    capabilities:
      - NET_ADMIN
    restart_policy: unless-stopped
    state: started
    network_mode: host
    env:
      PROTONVPN_TIER: "{{ protonvpn.tier }}" 
      PROTONVPN_USERNAME: "{{ protonvpn.username }}"
      PROTONVPN_PASSWORD: "{{ protonvpn.password }}"
      PROTONVPN_SERVER: "{{ protonvpn.server }}"

- name: Copy SSH Public Keys
  become_user: "{{ user.username }}"
  ansible.builtin.copy:
    content: "{{ lookup('community.general.bitwarden', 'nas_ssh_key', field='username')[0] }}"
    dest: $HOME/.ssh/id_ed25519.pub
    mode: 0644

- name: Copy SSH Private Key
  become_user: "{{ user.username }}"
  ansible.builtin.copy:
    content: "{{ lookup('community.general.bitwarden', 'nas_ssh_key', field='password')[0] }}"
    dest: $HOME/.ssh/id_ed25519
    mode: 0600

- name: Split SSH Private Key From 1 To 3 Lines
  become_user: "{{ user.username }}"
  ansible.builtin.shell: |
    [[ $(/bin/cat .ssh/id_ed25519 | wc -l) -eq 0 ]] && sed -i -e 's/\$/\n/g' ~/.ssh/id_ed25519
  args:
    executable: /bin/bash

- name: Clone selfhosted-config git repository
  become_user: "{{ user.username }}"
  ansible.builtin.git:
    repo: git@github.com:jj-style/selfhosted-config.git
    dest: $HOME/selfhosted-config
    clone: yes
    update: yes
    accept_hostkey: true
