---


- name: mask sleep/suspend services
  tags: systemd
  ansible.builtin.systemd:
    name: "{{ item }}"
    masked: yes
  loop:
    - sleep.target
    - suspend.target
    - hibernate.target
    - hybrid-sleep.target


- name: mount data disks
  mount:
    fstype: "{{ item.fstype }}"
    opts: "{{ item.opts }}"
    path: "{{ item.path }}"
    src: "{{ item.src}}"
    backup: true
    state: mounted
  loop: "{{ data_disks | flatten(levels=1) }}"

- name: mount mergerfs
  mount:
    fstype: "{{ item.fstype }}"
    opts: "{{ item.opts }}"
    path: "{{ item.path }}"
    src: "{{ item.src}}"
    backup: true
    state: mounted
  loop: "{{ mergerfs_disks | flatten(levels=1) }}"

- name: mount snapraid parity drives
  mount:
    fstype: "{{ item.fstype }}"
    opts: "{{ item.opts }}"
    path: "{{ item.path }}"
    src: "{{ item.src}}"
    backup: true
    state: mounted
  loop: "{{ snapraid_disks | flatten(levels=1) }}"

- block:
  - include_tasks:
      file: snapraid.yml
      apply:
        tags: snapraid
    tags: always
  - include_tasks: services.yml
  - include_tasks: ufw_firewall.yml
    apply:
      tags: firewall,ufw
    tags: firewall,ufw

- name: Enable IPv4 forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes

- name: Run ProtonVPN Docker Container
  tags: vpn,protonvpn
  docker_container:
    name: protonvpn
    image: ghcr.io/tprasadtp/protonvpn:latest
    devices:
      - /dev/net/tun:/dev/net/tun
    capabilities:
      - NET_ADMIN
    restart_policy: unless-stopped
    state: stopped
    network_mode: host
    env:
      PROTONVPN_TIER: "{{ protonvpn.tier }}" 
      PROTONVPN_USERNAME: "{{ protonvpn.username }}"
      PROTONVPN_PASSWORD: "{{ protonvpn.password }}"
      PROTONVPN_SERVER: "{{ protonvpn.server }}"

- name: Write SSH Public Key
  become_user: "{{ user.username }}"
  ansible.builtin.copy:
    dest: $HOME/.ssh/id_ed25519.pub
    mode: 0644
    content: "{{ ssh_public_key }}"

- name: Write SSH Private Key
  become_user: "{{ user.username }}"
  ansible.builtin.copy:
    dest: $HOME/.ssh/id_ed25519
    mode: 0600
    content: "{{ ssh_private_key }}"

- name: Clone selfhosted-config git repository
  become_user: "{{ user.username }}"
  ansible.builtin.git:
    repo: git@github.com:jj-style/selfhosted-config.git
    dest: $HOME/selfhosted-config
    clone: yes
    update: yes
    accept_hostkey: true

## Selfhosted Services Stuff
- name: Create cronjob to backup linkding database
  tags: cron,selfhosted,never
  become_user: "{{ user.username }}"
  ansible.builtin.cron:
    name: "backup-linkding"
    special_time: "daily"
    job: "sqlite3 /opt/linkding/db.sqlite3 \".backup '/home/jj/docker-data/linkding/backup.sqlite3'\""
